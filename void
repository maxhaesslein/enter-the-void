#!/usr/bin/python


# Enter the Void
# v1, 2023
# by maxhaesslein
# www.maxhaesslein.de

from queue import Queue
from threading import Thread
import numpy as np
import pygame
import pyaudio
import aubio
import os
import sys
import time
import math


options = {
	'screenWidth': 1280,
	'screenHeight': 720,

	'fps': 30,

    'bufferSize': 512,
    'winSizeMultiple': 2, # 2 or 4

	'verbose': True,

	'windowName': 'Enter the Void',

    'audioDevice': 'auto',
    'audioDisplayScaling': 3000,

    'silenceThreshold': 0.18,

    'imagePath': 'assets/',
    'imageExtension': 'png',

}

debugDisplay = {
    'frameCount': False,
    'fps': True,
    'audioFps': False,
    'bpm': False,
    'interval': False,
    'progress': False,
    'pitch': False,
    'volume': False,
    'peaks': False,
}


# setup window
pygame.init()
screen = pygame.display.set_mode((options['screenWidth'], options['screenHeight']), pygame.FULLSCREEN | pygame.NOFRAME )
clock = pygame.time.Clock()

pygame.font.init()
font = pygame.font.SysFont( None, 48 )

screen.fill( "black" )
text = font.render('loading ...', True, "white")
textPosition = text.get_rect(center=(screen.get_width()/2, screen.get_height()/2))
screen.blit(text, textPosition)
pygame.display.flip()


# get audio input options
pa = pyaudio.PyAudio()
if options['verbose']:
    print("listing microphones")
    for i in range(pa.get_device_count()):
        dev = pa.get_device_info_by_index(i)
        print(i,dev['name'],dev['maxInputChannels'])
        if options['audioDevice'] == 'auto' and dev['maxInputChannels'] > 0:
            options['audioDevice'] = i
            print('  automatically set audio device to '+str(i))
if pa.get_device_count() < options['audioDevice']:
    print('audio device index is out of range (found '+str(pa.get_device_count())+' audio devices, requested #'+str(options['audioDevice'])+')')
    sys.exit()
audioDevice = pa.get_device_info_by_index(options['audioDevice'])
if audioDevice['maxInputChannels'] <= 0:
    print('audio device has no input channels! aborting')
    print('(use "arecord -l" to check available devices)')
    sys.exit()
audioOptions = {
    'deviceIndex': audioDevice['index'],
    'sampleRate': int(audioDevice['defaultSampleRate']),
    'inputChannels': 1,
    'hopSize': options['bufferSize'],
    'winSize': options['bufferSize']*options['winSizeMultiple'],
}

# get assets
imageFiles = [f for f in os.listdir(options['imagePath']) if os.path.isfile(os.path.join(options['imagePath'], f)) and f.lower().endswith(options['imageExtension'])]

assets = []

for imageFile in imageFiles:
    path = options['imagePath']+imageFile

    image = pygame.image.load(path).convert()

    w = 340
    h = image.get_width()/image.get_height()*w
    image = pygame.transform.scale(image, (w, h))

    image.set_colorkey("black")

    assets.append(image)


if options['verbose']:
    print('')
    print('---------')
    print('')
    print('-- options --')
    print(options)
    print('')
    print('-- audio options --')
    print(audioOptions)
    print('')
    print('-- assets --')
    print(str(len(assets))+' assets loaded')
    print('')
    print('---------')
    print('')



class AudioProcessor():

    def __init__(self):

        self.fpsMeasurement = options['fps']
        self.previousTime = self.currentTime = time.time()
        self.fpsSmoothing = 0.9

        self.beatQueue = Queue()
        self.pitchQueue = Queue()

        peakBufferSize = int(audioOptions['sampleRate']/options['bufferSize']) # one second worth of bufferSizes
        self.peakBuffer = np.zeros(peakBufferSize)
        self.peakBufferBeat = np.zeros(peakBufferSize)
        self.peakBufferIndex = 0

        volumeBufferSize = int((audioOptions['sampleRate']/options['bufferSize'])/options['fps']) # one frame worth of bufferSizes
        if volumeBufferSize < 1:
            volumeBufferSize = 1
        self.volumeBuffer = np.zeros(volumeBufferSize)
        self.volumeBufferIndex = 0

        self.tempoDetection = aubio.tempo(method='default', buf_size=audioOptions['winSize'], hop_size=audioOptions['hopSize'], samplerate=audioOptions['sampleRate'])

        self.pitchDetection = aubio.pitch(method='default', buf_size=audioOptions['winSize'], hop_size=audioOptions['hopSize'], samplerate=audioOptions['sampleRate'])
        self.pitchDetection.set_unit('cent')

        self.audio = pyaudio.PyAudio()
        self.stream = self.audio.open(format=pyaudio.paFloat32,
                    input=True,
                    channels=audioOptions['inputChannels'],
                    input_device_index=audioOptions['deviceIndex'],
                    frames_per_buffer=options['bufferSize'],
                    rate=audioOptions['sampleRate'],
                    stream_callback=self.readAudioFrames)


    def readAudioFrames(self, in_data, frame_count, time_info, status):

        signal = np.frombuffer(in_data, dtype=np.float32)

        volume = np.sum(signal**2)/len(signal)

        beat = self.tempoDetection(signal)
        if beat:
            bpm = self.tempoDetection.get_bpm()
            self.beatQueue.put(bpm)

        pitch = self.pitchDetection(signal)
        if pitch[0] != 0:
            self.pitchQueue.put(pitch[0])

        peak = np.abs(np.max(signal)-np.min(signal))
        self.peakBuffer[self.peakBufferIndex] = peak*options['audioDisplayScaling']
        self.peakBufferBeat[self.peakBufferIndex] = beat

        self.peakBufferIndex += 1
        if self.peakBufferIndex >= len(self.peakBuffer):
            self.peakBufferIndex = 0

        self.volumeBuffer[self.volumeBufferIndex] = volume

        self.volumeBufferIndex += 1
        if self.volumeBufferIndex >= len(self.volumeBuffer):
            self.volumeBufferIndex = 0

        self.previousTime, self.currentTime = self.currentTime, time.time()
        fps = math.ceil(1./(self.currentTime-self.previousTime))
        self.fpsMeasurement = (self.fpsMeasurement*self.fpsSmoothing) + (fps*(1.0-self.fpsSmoothing))

        return (in_data, pyaudio.paContinue)

    def getBeat(self):
        if self.beatQueue.qsize() > 0:
            return self.beatQueue.get()
        return False

    def getPitch(self):
        if self.pitchQueue.qsize() > 0:
            return self.pitchQueue.get()
        return False

    def getPeaks(self):
        return self.peakBuffer, self.peakBufferBeat, self.peakBufferIndex

    def getVolume(self):
        volume = np.sum(self.volumeBuffer)
        return volume

    def getFps(self):
        return self.fpsMeasurement

    def stop(self):
        self.stream.stop_stream()
        self.stream.close()
        self.audio.terminate()


def drawDebugDisplay( beatInformation ):

    global volumePercentMeasurement

    # fps debug text
    textY = 0
    if debugDisplay['fps']:
        text = str(int(fps))+' main fps'
        textColor = "green"
        if fps < options['fps']*0.8:
            textColor = "red"
        elif fps < options['fps']*0.9:
            textColor = "yellow"
        textRender = font.render( text, True, textColor )
        textPosition = (screen.get_width()-textRender.get_width(), textY)
        screen.blit(textRender, textPosition)
        textY += textRender.get_height()+10

    # audioProcessor fps debug text
    if debugDisplay['audioFps']:
        text = str(math.ceil(audioProcessor.getFps()))+' audio fps'
        textRender = font.render( text, True, "white" )
        textPosition = (screen.get_width()-textRender.get_width(), textY)
        screen.blit(textRender, textPosition)

    # frame count debug text
    if debugDisplay['frameCount']:
        text = 'frame #'+str(beatInformation['frameNumber'])+' / next beat at #'+str(int(beatInformation['frameNumber']+beatInformation['framesUntilNextBeat']))
        textRender = font.render( text, True, "white" )
        textPosition = (0, screen.get_height()-textRender.get_height())
        screen.blit(textRender, textPosition)

    # bpm debug text
    textY = int(screen.get_height()/5)
    if debugDisplay['bpm']:
        text = str(round(beatInformation['bpm']))+' bpm'
        textColor = "white"
        if beatInformation['beat']:
            textColor = "red"
        textRender = font.render( text, True, textColor )
        textX = int((screen.get_width()-textRender.get_width())/2)
        textPosition = (textX, textY)
        screen.blit(textRender, textPosition)
        textY += textRender.get_height()+40

    # fpi debug text
    if debugDisplay['interval']:
        text = str(round(beatInformation['framesPerInterval']))+' frames per interval'
        textColor = "white"
        if beatInformation['beat']:
            textColor = "red"
        textRender = font.render( text, True, textColor )
        textX = int((screen.get_width()-textRender.get_width())/2)
        textPosition = (textX, textY)
        screen.blit(textRender, textPosition)

    # print progress bar until next beat
    y = int(screen.get_height() * 2/3)
    x = 300
    w = int(screen.get_width() - x*2)
    h = 30
    if debugDisplay['progress']:
        color = "white"
        if beatInformation['lateBeat']:
            color = "red"
        filledWidth = round((1-(beatInformation['framesUntilNextBeat']/beatInformation['framesPerInterval']))*w)
        pygame.draw.rect(screen, color, (x,y,w,h), True)
        pygame.draw.rect(screen, color, (x,y,filledWidth,h), False)

        text = 'next beat'
        textRender = font.render( text, True, color )
        textX = int(x-textRender.get_width()-10)
        textY = int(y+h/2-textRender.get_height()/2)
        textPosition = (textX, textY)
        screen.blit(textRender, textPosition)

        y += h + 20

    # print pitch
    if debugDisplay['pitch']:

        filledWidth = int((beatInformation['pitch'])*w/100)
        pygame.draw.rect(screen, "white", (x,y,w,h), True)
        pygame.draw.rect(screen, "white", (x,y,filledWidth,h), False)

        text = 'pitch'
        textRender = font.render( text, True, "white" )
        textX = int(x-textRender.get_width()-10)
        textY = int(y+h/2-textRender.get_height()/2)
        textPosition = (textX, textY)
        screen.blit(textRender, textPosition)

        y += h + 20

    # print Volume
    if debugDisplay['volume']:
        color = "white"
        if beatInformation['silence']:
            color = "red"
        midW= int(w/2)
        scale = 4
        if beatInformation['volume'] > 0:
            volumePercent = beatInformation['volume']/beatInformation['averageVolume']
        else:
            volumePercent = 1
        if volumePercent > 2:
            volumePercent = 2
        silenceMarker = round(w/2*options['silenceThreshold'])
        volumePercentMeasurement = (volumePercentMeasurement*globalVolumeDisplaySmoothing) + (volumePercent * (1.0-globalVolumeDisplaySmoothing))
        filledWidth = int(midW*(volumePercentMeasurement-1))

        filledX = x
        if filledWidth < 0:
            filledX += filledWidth
            filledWidth *= -1

        pygame.draw.rect(screen, color, (filledX+midW,y,filledWidth,h), False)
        pygame.draw.rect(screen, color, (x,y,w,h), True)
        pygame.draw.rect(screen, color, (x+silenceMarker,y,2,h), True)

        text = 'volume'
        textRender = font.render( text, True, "white" )
        textX = int(x-textRender.get_width()-10)
        textY = int(y+h/2-textRender.get_height()/2)
        textPosition = (textX, textY)
        screen.blit(textRender, textPosition)

    # print peaks
    if debugDisplay['peaks']:
        data, beatData, index = audioProcessor.getPeaks()
        index -= 1
        if index < 0:
            index = options['fps']-1

        w = math.ceil(options['screenWidth']/len(data))
        x = options['screenWidth']-w
        y = int(options['screenHeight']*3/5)
        h = 4
        color = (255,255,255)

        for i in range(len(data)):
            y2 = int(data[index])
            o = beatData[index]

            if o:
                pygame.draw.rect(screen, "red", (x,y-200,4,200), False)

            pygame.draw.rect(screen, "white", (x,y-y2,w,h), False)

            x += w

            index += 1
            if index >= len(data):
                index = 0
            if x >= options['screenWidth']:
                x = 0


def getBeatInformation():

    global framesUntilNextBeat, pitchValue, volumeBufferIndex, bpm, framesPerInterval, lateBeat, frameNumber

    framesUntilNextBeat -= 1
    if framesUntilNextBeat < 0:
        lateBeat = True
        framesUntilNextBeat = 0

    beat = audioProcessor.getBeat()
    if beat:
        bpm = beat
        beat = True
        framesPerInterval = framesUntilNextBeat = fps*60/bpm
        lateBeat = False

    if pitchValue > 0:
        oldPitchValue = pitchValue
    pitchValue = 0
    pitch = audioProcessor.getPitch()
    if pitch and pitch > 0:
        pitchValue = pitch

    globalVolume = audioProcessor.getVolume()
    volumeBuffer[volumeBufferIndex] = globalVolume
    volumeBufferIndex += 1
    if volumeBufferIndex >= len(volumeBuffer):
        volumeBufferIndex = 0
    globalAverageVolume = np.sum(volumeBuffer)/len(volumeBuffer)

    silence = False
    if globalVolume < globalAverageVolume * options['silenceThreshold']:
        silence = True

    beatInformation = {
            'fps': fps,
            'frameNumber': frameNumber,
            'bpm': bpm,
            'beat': beat,
            'lateBeat': lateBeat,
            'framesUntilNextBeat': framesUntilNextBeat,
            'framesPerInterval': framesPerInterval,
            'pitch': pitchValue,
            'volume': globalVolume,
            'averageVolume': globalAverageVolume,
            'silence': silence,
    }

    return beatInformation



s_img_index = 0
y_offset = 0
x_offset = 0
rotation = 0


def drawFrame( beatInformation, dt ):

    global s_img_index, rotation

    rotation += dt*50

    p = beatInformation['framesUntilNextBeat']/beatInformation['framesPerInterval']

    if beatInformation['beat'] and not beatInformation['silence']:

        s_img_index += 1
        if s_img_index >= len(assets):
            s_img_index = 0

        if False:
            screen.fill( "red" )

    s_img = assets[s_img_index]

    if True:

        # rotate first, then loop over positions

        x = screen.get_width()/2
        y = screen.get_height()/2
        rect = s_img.get_rect(center=(x,y))
        r_img, r_rect = rotate(s_img, rect, rotation)

        xI = 0
        yI = 0

        for i in range(4):

            x = screen.get_width()/2 +  xI * screen.get_width()/5 - r_img.get_width()/2
            y = screen.get_height()/2 + yI * screen.get_height()/3 - r_img.get_height()/2

            rect = s_img.get_rect(center=(x,y))

            r2_img = r_img

            if yI == 1:
                r2_img = pygame.transform.flip(r2_img, False, True)

            if xI == 0:
                r2_img = pygame.transform.flip(r2_img, True, False)

            screen.blit(r2_img, rect)

            xI += 1

            if yI >= 1 and xI >= 2:
                xI = 0

            if xI >= 2:
                xI = 1
                yI += 1

    else:

        # rotate while looping

        s_img = assets[s_img_index]

        xI = 0
        yI = 0

        for i in range(4):

            x = screen.get_width()/2 +  xI * screen.get_width()/5 - s_img.get_width()/2
            y = screen.get_height()/2 + yI * screen.get_height()/3 - s_img.get_height()/2

            rect = s_img.get_rect(center=(x,y))

            angle = rotation
            if xI == 0 and yI == 0:
                angle *= -1
            if xI == 1 and yI == 1:
                angle *= -1

            if yI == 1:
                s2_img = pygame.transform.flip(s_img, False, True)
            else:
                s2_img = s_img

            if xI == 0:
                s2_img = pygame.transform.flip(s2_img, True, False)

            r_img, r_rect = rotate(s2_img, rect, angle)

            screen.blit(r_img, r_rect)


            xI += 1

            if yI >= 1 and xI >= 2:
                xI = 0

            if xI >= 2:
                xI = 1
                yI += 1


def rotate(image, rect, angle):
    # Rotate the original image without modifying it.
    new_image = pygame.transform.rotate(image, angle)
    # Get a new rect with the center of the old rect.
    rect = new_image.get_rect(center=rect.center)
    return new_image, rect

def rotatePivoted(im, angle, pivot):
    image = pygame.transform.rotate(im, angle)
    rect = image.get_rect()
    rect.center = pivot
    return image, rect



targetTime = 1./options['fps']
frameNumber = 0
bpm = -1
framesPerInterval = -1
framesUntilNextBeat = -1
lateBeat = False
pitchValue = 0
oldPitchValue = 0

volumeBuffer = np.zeros(options['fps']*10) # 10 seconds worth of frames
volumeBufferIndex = 0
globalVolume = 0
globalAverageVolume = 0
globalVolumeDisplaySmoothing = 0.7
volumePercentMeasurement = 1

fps = options['fps']
fpsDisplay = options['fps']


verbose = False

audioProcessor = AudioProcessor()


running = True
dt = 0

player_pos = pygame.Vector2(screen.get_width() / 2, screen.get_height() / 2) # DEBUG

# main loop
while running:

    # poll for events; pygame.QUIT event means the user clicked X to close your window
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
            elif event.key == pygame.K_q:
                debugDisplay['fps'] = not debugDisplay['fps']
            elif event.key == pygame.K_w:
                debugDisplay['audioFps'] = not debugDisplay['audioFps']
            elif event.key == pygame.K_e:
                debugDisplay['frameCount'] = not debugDisplay['frameCount']
            elif event.key == pygame.K_r:
                debugDisplay['bpm'] = not debugDisplay['bpm']
            elif event.key == pygame.K_t:
                debugDisplay['interval'] = not debugDisplay['interval']
            elif event.key == pygame.K_z:
                debugDisplay['progress'] = not debugDisplay['progress']
            elif event.key == pygame.K_u:
                debugDisplay['pitch'] = not debugDisplay['pitch']
            elif event.key == pygame.K_i:
                debugDisplay['volume'] = not debugDisplay['volume']
            elif event.key == pygame.K_o:
                debugDisplay['peaks'] = not debugDisplay['peaks']
            elif event.key == pygame.K_v:
                verbose = not verbose

    screen.fill( "black" )

    beatInformation = getBeatInformation()

    drawFrame( beatInformation, dt )
    drawDebugDisplay( beatInformation )

    pygame.display.flip() # update screen

    frameNumber += 1 # TODO: check, when this rolls over

    # limits FPS; dt is delta time in seconds since last frame, used for framerate-independent physics.
    dt = clock.tick(options['fps']) / 1000

    fps = clock.get_fps()


print('cleaning up ..')

audioProcessor.stop()
pygame.quit()

print('bye!')

