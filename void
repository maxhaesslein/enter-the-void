#!/usr/bin/python


# Enter the Void
# v1, 2023
# by maxhaesslein
# www.maxhaesslein.de

from queue import Queue
import numpy as np
import cv2
import pyaudio
import aubio
import sys
import time
import math

options = {
	'screenWidth': 1280,
	'screenHeight': 720,
	'fps': 30,

    'bufferSize': 512,

	'verbose': True,

	'windowName': 'Enter the Void',

    'audioDevice': 'auto',

    'fpsSmoothing': 0.6, # this smoothes only the fps _debug display_, NOT the real fps

}


# setup window
cv2.namedWindow( options['windowName'], cv2.WINDOW_NORMAL )
cv2.resizeWindow( options['windowName'], options['screenWidth'], options['screenHeight'] )
cv2.setWindowProperty( options['windowName'], cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN )

# display startup image
startupImage = np.zeros((options['screenHeight'], options['screenWidth'], 3), np.uint8)
font = cv2.FONT_HERSHEY_TRIPLEX
text = 'loading ...'
fontSize = 1
fontWidth = 1
fontColor = (255,255,255)
textSize = cv2.getTextSize(text, font, fontSize, fontWidth)[0]
textX = int((options['screenWidth'] - textSize[0]) / 2)
textY = int((options['screenHeight'] - textSize[1]*2))
cv2.putText( img=startupImage, text=text, org=(textX, textY), fontFace=font, fontScale=fontSize, color=fontColor, thickness=fontWidth, lineType=cv2.LINE_AA )

cv2.imshow(options['windowName'], startupImage)
cv2.waitKey(60)

# get audio input options
pa = pyaudio.PyAudio()
if options['verbose']:
    print("listing microphones")
    for i in range(pa.get_device_count()):
        dev = pa.get_device_info_by_index(i)
        print(i,dev['name'],dev['maxInputChannels'])
        if options['audioDevice'] == 'auto' and dev['maxInputChannels'] > 0:
            options['audioDevice'] = i
            print('  automatically set audio device to '+str(i))
if pa.get_device_count() < options['audioDevice']:
    print('audio device index is out of range (found '+str(pa.get_device_count())+' audio devices, requested #'+str(options['audioDevice'])+')')
    sys.exit()
audioDevice = pa.get_device_info_by_index(options['audioDevice'])
if audioDevice['maxInputChannels'] <= 0:
    print('audio device has no input channels! aborting')
    print('(use "arecord -l" to check available devices)')
    sys.exit()
audioOptions = {
    'deviceIndex': audioDevice['index'],
    'sampleRate': int(audioDevice['defaultSampleRate']),
    'inputChannels': 1,
    'hopSize': options['bufferSize'],
    'winSize': options['bufferSize']*2,
}

if options['verbose']:
    print('')
    print('---------')
    print('')
    print('-- options --')
    print(options)
    print('')
    print('-- audio options --')
    print(audioOptions)
    print('')
    print('---------')
    print('')



# create beat tracking:
tempoDetection = aubio.tempo(method='default', buf_size=audioOptions['winSize'], hop_size=audioOptions['hopSize'], samplerate=audioOptions['sampleRate'])

beatQueue = Queue()

def readAudioFrames(in_data, frame_count, time_info, status):

    signal = np.frombuffer(in_data, dtype=np.float32)

    beat = tempoDetection(signal)
    if beat:
        bpm = tempoDetection.get_bpm()
        beatQueue.put(bpm)

    return (in_data, pyaudio.paContinue)

pa = pyaudio.PyAudio()
inputStream = pa.open(format=pyaudio.paFloat32,
                input=True,
                channels=audioOptions['inputChannels'],
                input_device_index=audioOptions['deviceIndex'],
                frames_per_buffer=options['bufferSize'],
                rate=audioOptions['sampleRate'],
                stream_callback=readAudioFrames)



emptyImage = np.zeros((options['screenHeight'], options['screenWidth'], 3), np.uint8)

targetTime = 1./options['fps']
frameNumber = 0
bpm = -1
framesPerInterval = -1
framesUntilNextBeat = -1
lateBeat = False

fpsDisplay = options['fps']
previousTime = time.time()
currentTime = time.time()

font = cv2.FONT_HERSHEY_TRIPLEX

# main loop
while True:

    startTime = time.time()

    framesUntilNextBeat -= 1
    if framesUntilNextBeat < 0:
        lateBeat = True
        framesUntilNextBeat = 0

    beat = False
    if beatQueue.qsize() > 0:
        bpm = beatQueue.get()
        beat = True
        framesPerInterval = framesUntilNextBeat = options['fps']*60/bpm
        lateBeat = False


    frame = emptyImage.copy()


    # frame count debug text
    text = 'frame #'+str(frameNumber)+' / next beat at #'+str(int(frameNumber+framesUntilNextBeat))
    fontSize = 1
    fontWidth = 1
    fontColor = (255,255,255)
    textSize = cv2.getTextSize(text, font, fontSize, fontWidth)[0]
    textX = 1
    textY = options['screenHeight']-1
    cv2.putText( img=frame, text=text, org=(textX, textY), fontFace=font, fontScale=fontSize, color=fontColor, thickness=fontWidth, lineType=cv2.LINE_AA )

    # fps debug text
    text = str(math.ceil(fpsDisplay))+' fps'
    fontSize = 1
    fontWidth = 1
    if fpsDisplay < options['fps']*0.8:
        fontColor = (0,0,255)
    elif fpsDisplay < options['fps']*0.9:
        fontColor = (0,255,255)
    else:
        fontColor = (0,255,0)
    textSize = cv2.getTextSize(text, font, fontSize, fontWidth)[0]
    textX = int((options['screenWidth'] - textSize[0]))
    textY = textSize[1]
    cv2.putText( img=frame, text=text, org=(textX, textY), fontFace=font, fontScale=fontSize, color=fontColor, thickness=fontWidth, lineType=cv2.LINE_AA )

    # bpm debug text
    text = str(round(bpm))+' bpm'
    fontSize = 4
    fontWidth = 4
    fontColor = (255,255,255)
    if beat:
        fontColor = (0,0,255)
    textSize = cv2.getTextSize(text, font, fontSize, fontWidth)[0]
    textX = int((options['screenWidth'] - textSize[0])/2)
    textY = int(options['screenHeight']/3)
    cv2.putText( img=frame, text=text, org=(textX, textY), fontFace=font, fontScale=fontSize, color=fontColor, thickness=fontWidth, lineType=cv2.LINE_AA )

    # fpi debug text
    text = str(round(framesPerInterval))+' frames per interval'
    fontSize = 1
    fontWidth = 1
    fontColor = (255,255,255)
    if beat:
        fontColor = (0,0,255)
    textSize = cv2.getTextSize(text, font, fontSize, fontWidth)[0]
    textX = int((options['screenWidth'] - textSize[0])/2)
    textY += textSize[1]+50
    cv2.putText( img=frame, text=text, org=(textX, textY), fontFace=font, fontScale=fontSize, color=fontColor, thickness=fontWidth, lineType=cv2.LINE_AA )


    x = 100
    w = int(options['screenWidth'] - 200)
    y = int(options['screenHeight'] * 2/3)
    h = 50
    c = (255,255,255)
    if lateBeat:
        c = (0,0,255)
    lineWidth = 1
    filledWidth = round((1-(framesUntilNextBeat/framesPerInterval))*w)
    cv2.rectangle( frame, (x,y), (x+w, y+h), c, lineWidth )
    cv2.rectangle( frame, (x,y), (x+filledWidth, y+h), c, -1 )



    cv2.imshow(options['windowName'], frame)

    frameNumber += 1

    previousTime, currentTime = currentTime, time.time()
    currentFps = round(1./(currentTime-previousTime))
    fpsDisplay = (fpsDisplay * options['fpsSmoothing']) + (currentFps * (1.0-options['fpsSmoothing']))


    usedTime = time.time() - startTime
    timeLeft = targetTime-usedTime
    sleepTime = int(timeLeft*1000)
    if sleepTime < 1:
        sleepTime = 1

    key = cv2.waitKey(sleepTime)

    if key == 27: # escape
        print('exiting')
        break



print('cleaning up ..')

inputStream.stop_stream()
inputStream.close()
cv2.destroyAllWindows()

print('bye!')

